import 'package:flutter/material.dart';
import 'package:photo_manager/photo_manager.dart';
import 'package:photo_manager_image_provider/photo_manager_image_provider.dart';

class MediaEntityProvider extends StatelessWidget {
  final AssetEntity entity;

  const MediaEntityProvider({super.key, required this.entity});

  @override
  Widget build(BuildContext context) {
    return Image(
      image: AssetEntityImageProvider(
        entity,
        isOriginal: false,
        thumbnailSize: ThumbnailSize(200, 200),
      ),
      fit: BoxFit.cover,
    );
  }
}


/*

### Kodlarni clean code tamoyillari, ishlash tezligi va xavfsizlik jihatidan tahlil qilamiz.

---

### üß© 1Ô∏è‚É£ **Class orqali yozilgan variant:**

```dart
class MediaEntityProvider extends StatelessWidget {
  final AssetEntity entity;

  const MediaEntityProvider({super.key, required this.entity});

  @override
  Widget build(BuildContext context) {
    return Image(
      image: AssetEntityImageProvider(
        entity,
        isOriginal: false,
        thumbnailSize: ThumbnailSize(200, 200),
      ),
      fit: BoxFit.cover,
    );
  }
}
```

### üß© 2Ô∏è‚É£ **Funksiya orqali yozilgan variant:**

```dart
Widget mediaEntityProvider(AssetEntity entity) {
  return Image(
    image: AssetEntityImageProvider(
      entity,
      isOriginal: false,
      thumbnailSize: ThumbnailSize(200, 200),
    ),
    fit: BoxFit.cover,
  );
}
```

---

### ‚ö° **Farqlarini tahlil qilamiz:**

| Metrika             | **Class (StatelessWidget)**                                | **Function (Widget qaytaruvchi)**                        |
|---------------------|-----------------------------------------------------------|--------------------------------------------------------|
| **Clean Code**      | ‚úÖ **Tozaroq va professionalroq**                          | ‚ö†Ô∏è Oddiyroq, lekin ko'p joyda uncha qulay emas         |
| **Performance**     | ‚öñÔ∏è Bir xil ishlaydi                                        | ‚öñÔ∏è Bir xil ishlaydi                                    |
| **Reusable**        | ‚úÖ Oson qayta foydalaniladi                                | ‚ùå Funksiya faqat ma'lum joyda foydalanish uchun qulay |
| **State Management**| ‚úÖ GetX, Provider, Bloc bilan integratsiya qilish oson     | ‚ö†Ô∏è Murakkab loyihalarda moslash qiyin                 |
| **Constructor Args**| ‚úÖ Parametrlar bilan ishlash qulay                          | ‚ùå Parametrlar uzatilishi uncha oson emas              |
| **Hot Reload**      | ‚úÖ Tezroq aniqlanadi va qayta yuklanadi                    | ‚ö†Ô∏è Kamdan-kam hollarda aniq aniqlanmasligi mumkin     |
| **Xavfsizlik**      | ‚úÖ Xatolarni ushlab turadi va kodni himoyalaydi            | ‚ùå Potensial xatolarni oldindan ko'rsatmaydi           |

---

### üõ† **Clean Code tomondan qaysi biri to'g'ri?**

‚úÖ **Class (StatelessWidget) shakli clean code tamoyillariga ko'proq mos keladi.**

- **Professional loyihalarda** `Widget`larni **klass shaklida** yozish tavsiya etiladi.
- **Xato qilish ehtimolini kamaytiradi**, ayniqsa murakkab `state` boshqaruvi bilan ishlaganda.
- `StatelessWidget` **Flutter lifecycle** (hayot tsikli) funksiyalaridan to'liq foydalanish imkonini beradi.

---

### ‚öôÔ∏è **Performance farqi bormi?**

üí° Ikkala usul ham ishlash tezligida **deyarli bir xil**. Ammo klass shaklida yozilgani **kuzatish (tracking)** va **optimallashtirish** uchun qulayroq bo'ladi.

---

### üîí **Xavfsizlik jihatidan qaysi biri yaxshi?**

‚úÖ **Class shakli xavfsizroq**, chunki:

1. **Flutter lifecycle** funksiyalari bilan ishlashga imkon beradi (`initState`, `dispose` va boshqalar).
2. Parametrlarni `final` qilib o'rnatish mumkin, bu esa kodni o'zgarmas (immutable) qiladi.
3. **Null safety** xatolaridan himoya qilish osonroq.

---

### üìã **Xulosa:**
Agar **bir marta ishlatiladigan oddiy widget** kerak bo'lsa, funksiya variantini ishlatish mumkin.
Ammo **professional darajada, qayta foydalanish uchun yoki murakkab UI yaratishda** **`StatelessWidget` yoki `StatefulWidget`** ishlatish **to'g'ri yo'l** hisoblanadi.

---

### ‚úÖ **Tavsiya qilinadigan toza va xavfsiz variant:**

```dart
class MediaEntityProvider extends StatelessWidget {
  final AssetEntity entity;

  const MediaEntityProvider({super.key, required this.entity});

  @override
  Widget build(BuildContext context) {
    return Image(
      image: AssetEntityImageProvider(
        entity,
        isOriginal: false,
        thumbnailSize: ThumbnailSize(200, 200),
      ),
      fit: BoxFit.cover,
    );
  }
}
```

*/


Widget mediaEntityProvider(AssetEntity entity){
  return Image(
    image: AssetEntityImageProvider(
      entity,
      isOriginal: false,
      thumbnailSize: ThumbnailSize(200, 200),
    ),
    fit: BoxFit.cover,
  );
}